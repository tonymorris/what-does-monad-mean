<?xml version="1.0" encoding="ISO-8859-1"?>

<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
    "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<sect1 id="Mythology" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Mythology</title>
  <sect2>
    <title>Debunking</title>
    <para>
      Debunking popular myths is often fraught with controversy, fallacy and futility, so before we do that, let's have
      fun with a myth that is not so popular nor controversial.
      <blockquote>
        <para>
          Athena punished Medusa by turning her hair tresses into snakes. Perseus then used Medusa's head as a weapon in
          battles.
        </para>
      </blockquote>
      Once upon a time, this story was popularly believed despite its obvious absurdity. In our modern times, other
      stories are widely believed, again, despite absurdity. A few of those follow.
    </para>
  </sect2>
  <sect2>
    <title>Monads are a hack for working with I/O in the real world</title>
    <sect3>
      <title>Other forms</title>
      <para>
        <itemizedlist>
          <listitem>
            <para>
              Monads are for impractical programming languages that try to be practical.
            </para>
          </listitem>
          <listitem>
            <para>
              Monads are for controlling side-effects.
            </para>
          </listitem>
          <listitem>
            <para>
              Without monads in $language we cannot do I/O.
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </sect3>
    <sect3>
      <title>Demystify</title>
      <para>
        Suppose a function that reverses a <code>List</code> and a class called <code>Banana</code> that your local
        fruit man has on his server.
<programlisting>
  &lt;A> List&lt;A> reverse(List&lt;A> list)
  class Banana {}
</programlisting>
      </para>
      <para>
        It is correct to say that we can reverse a list of bananas, but it is <emphasis role="bold">incorrect</emphasis>
        to say that the <code>reverse</code> function is in some way related to bananas. Reversing a list of bananas is
        merely a single instance of an infinite possibility. For precisely this reason, it is also incorrect to say
        that monads are in some way related to I/O.
      </para>
      <para>
        This metaphor might appear vague or inaccurate, but it is actually very (very) precise as you will see.
      </para>
    </sect3>
  </sect2>
  <sect2>
    <title>Monads are only for functional or esoteric programming languages</title>
    <sect3>
      <title>Other forms</title>
      <para>
        <itemizedlist>
          <listitem>
            <para>
              I don't use monads in my Java (or .NET or Ruby or Groovy or Python or ...) enterprise.
            </para>
          </listitem>
          <listitem>
            <para>
              Monads are for others using other languages, not me and my language.
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </sect3>
    <sect3>
      <title>Demystify</title>
      <para>
        <itemizedlist>
          <listitem>
            <para>
              FACT: All programmers, knowingly or not, use monads at least 100 times per day.
              <emphasis role="bold">I'll put a house on it.</emphasis>
            </para>
          </listitem>
          <listitem>
            <para>
              Like many myths, it is highly likely that the claimant has either no or a very poor understanding of the
              monad concept and is spreading the myth simply by repetition.
            </para>
          </listitem>
          <listitem>
            <para>
              Monads are at least as common as semi-colons in language syntaxes such as Java.
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </sect3>
  </sect2>
  <sect2>
    <title>Monads make my program impure</title>
    <para>
      This myth is often related to or borne of  those already mentioned. Interestingly, what the claimant is actually
      referring to (which is not monads, but controlling effects with types) makes programs pure, that would otherwise
      be impure. 
    </para>
  </sect2>
</sect1>
